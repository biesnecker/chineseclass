{"version":3,"sources":["webpack://chineseclass/./client/PromiseWorker.js","webpack://chineseclass/./client/shared/MessageType.js","webpack://chineseclass/./node_modules/idb/build/esm/wrap-idb-value.js","webpack://chineseclass/./node_modules/idb/build/esm/index.js","webpack://chineseclass/./node_modules/idb/build/esm/async-iterators.js","webpack://chineseclass/./client/workers/cardstate.js"],"names":["instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","get","objectStoreNames","undefined","objectStore","set","value","has","replaceTraps","callback","transformCachableValue","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","storeNames","tx","call","sort","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","all","oldTraps","advanceMethodProps","methodMap","advanceResults","ittrProxiedCursorToOriginalProxy","cursorIteratorTraps","cachedFunc","iterate","cursor","openCursor","proxiedCursor","delete","isIteratorProp","Symbol","asyncIterator","connect","appName","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","keyPath","autoIncrement","handleUpdateOnAnswer","factId","reviewType","correct","oldRecord","difficulty","lastReviewDate","currentDate","ts","Date","m","getMonth","getDate","getFullYear","getCurrentDateAsNumber","multiplier","Math","min","max","floor","put","id","handlers","onmessage","cnt","count","data","Uint32Array","idx","res","buffer","p","type","payload","message","h","Array","isArray","postMessage","err","wrapHandlerFuction","Error"],"mappings":"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","file":"cardstate.55c15090be6e575223f7.worker.js","sourcesContent":["export default class PromiseWorker {\n  constructor(worker) {\n    this.resolves = {};\n    this.rejects = {};\n    this.globalMessageId = 0;\n    this.worker = worker;\n    this.worker.addEventListener(\"message\", (msg) => this._handleMessage(msg));\n  }\n\n  sendMessage(type, payload) {\n    const id = this.globalMessageId++;\n    const message = { id, type, payload };\n\n    return new Promise((resolve, reject) => {\n      this.resolves[id] = resolve;\n      this.rejects[id] = reject;\n\n      this.worker.postMessage(message);\n    });\n  }\n\n  _handleMessage(message) {\n    const { id, err, payload } = message.data;\n    if (payload) {\n      const resolve = this.resolves[id];\n      resolve(payload);\n    } else {\n      const reject = this.rejects[id];\n      if (err !== null) {\n        reject(err);\n      } else {\n        reject(new Error(\"unknown error occurred\"));\n      }\n    }\n    delete this.resolves[id];\n    delete this.rejects[id];\n  }\n}\n\nconst wrapHandlerFuction = async (id, callback, payload) => {\n  try {\n    const res = await callback(payload);\n    if (Array.isArray(res)) {\n      postMessage({ id, err: null, payload: res[0] }, res[1]);\n    } else {\n      postMessage({ id, err: null, payload: res });\n    }\n  } catch (err) {\n    postMessage({ id, err, payload: null });\n  }\n};\n\nexport const makeWorkerFromHandlers = (handlers) => async (message) => {\n  const { id, type, payload } = message.data;\n  if (!(type in handlers)) {\n    postMessage({\n      id,\n      err: new Error(`Unknown message type: ${type}`),\n      payload: null,\n    });\n  } else {\n    const h = handlers[type];\n    await wrapHandlerFuction(id, h, payload);\n  }\n};\n","const MessageType = {\n  FETCH_ALL: \"FETCH_ALL\",\n  FETCH_ONE: \"FETCH_ONE\",\n  UPDATE_ON_CORRECT: \"UPDATE_ON_CORRECT\",\n  UPDATE_ON_INCORRECT: \"UPDATE_ON_INCORRECT\",\n};\n\nexport default MessageType;\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { r as replaceTraps, i as instanceOfAny, a as reverseTransformCache, u as unwrap } from './wrap-idb-value.js';\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n","/**\n * Worker handles storing and retrieving data from the local database. On\n * startup the app will request all card data we have, and then during review\n * it will save updated data post-review. The app itself has no knowledge of\n * stored data except via these messages.\n */\nimport { makeWorkerFromHandlers } from \"../PromiseWorker\";\nimport MessageType from \"../shared/MessageType\";\nimport { openDB } from \"idb/with-async-ittr\";\n\nconst dbname = \"flashcards\";\nconst dbversion = 1;\nconst default_difficulty = 200;\n\nconst connect = async (appName) =>\n  await openDB(dbname, dbversion, {\n    upgrade(db) {\n      let objstore = db.createObjectStore(appName, {\n        keyPath: \"id\",\n        autoIncrement: false,\n      });\n    },\n  });\n\nconst handleFetchAll = async ({ appName }) => {\n  const db = await connect(appName);\n  const cnt = await db.count(appName);\n  let data = new Uint32Array(cnt * 4);\n  let idx = 0;\n  const tx = db.transaction(appName);\n  for await (const cursor of tx.store) {\n    const value = cursor.value;\n    data[idx++] = value.id[0];\n    data[idx++] = value.id[1];\n    data[idx++] = value.difficulty;\n    data[idx++] = value.lastReviewDate;\n  }\n\n  const res = {\n    data: data.buffer,\n  };\n  return [res, [res.data]];\n};\n\nconst getCurrentDateAsNumber = () => {\n  const ts = new Date();\n  const m = ts.getMonth();\n  const d = ts.getDate();\n  const y = ts.getFullYear();\n  return d + m * 100 + y * 10000;\n};\n\nconst handleUpdateOnAnswer = async (\n  { appName, factId, reviewType },\n  correct\n) => {\n  const db = await connect(appName);\n  const oldRecord = await db.get(appName, [factId, reviewType]);\n  let difficulty = default_difficulty;\n  let lastReviewDate = 0;\n  if (oldRecord !== undefined) {\n    if (oldRecord.difficulty !== undefined) {\n      difficulty = oldRecord.difficulty;\n    }\n    if (oldRecord.lastReviewDate !== undefined) {\n      lastReviewDate = oldRecord.lastReviewDate;\n    }\n  }\n  const currentDate = getCurrentDateAsNumber();\n  if (lastReviewDate !== currentDate) {\n    lastReviewDate = currentDate;\n    const multiplier = correct ? 1.05 : 0.95;\n    // Clamp the difficulty between 1 and 1000\n    difficulty = Math.min(\n      1000,\n      Math.max(1, Math.floor(difficulty * multiplier))\n    );\n    await db.put(appName, {\n      id: [factId, reviewType],\n      difficulty,\n      lastReviewDate,\n    });\n  }\n  return {\n    complete: true,\n  };\n};\n\nonmessage = makeWorkerFromHandlers({\n  [MessageType.FETCH_ALL]: handleFetchAll,\n  [MessageType.UPDATE_ON_CORRECT]: async (p) =>\n    await handleUpdateOnAnswer(p, true),\n  [MessageType.UPDATE_ON_INCORRECT]: async (p) =>\n    await handleUpdateOnAnswer(p, false),\n});\n"],"sourceRoot":""}