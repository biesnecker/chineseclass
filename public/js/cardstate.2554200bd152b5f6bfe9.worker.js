(()=>{"use strict";const e="FETCH_ALL",t="UPDATE_ON_CORRECT",n="UPDATE_ON_INCORRECT";let r,a;const o=new WeakMap,s=new WeakMap,i=new WeakMap,c=new WeakMap,d=new WeakMap;let u={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return s.get(e);if("objectStoreNames"===t)return e.objectStoreNames||i.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return p(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function l(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...n){const r=t.call(f(this),e,...n);return i.set(r,e.sort?e.sort():[e]),p(r)}:(e instanceof IDBTransaction&&function(e){if(s.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",o),e.removeEventListener("abort",o)},a=()=>{t(),r()},o=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",a),e.addEventListener("error",o),e.addEventListener("abort",o)}));s.set(e,t)}(e),n=e,(r||(r=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,u):e);var t,n}function p(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",a),e.removeEventListener("error",o)},a=()=>{t(p(e.result)),r()},o=()=>{n(e.error),r()};e.addEventListener("success",a),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&o.set(t,e)})).catch((()=>{})),d.set(t,e),t}(e);if(c.has(e))return c.get(e);const t=l(e);return t!==e&&(c.set(e,t),d.set(t,e)),t}const f=e=>d.get(e),y=["get","getKey","getAll","getAllKeys","count"],g=["put","add","delete","clear"],v=new Map;function w(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(v.get(t))return v.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,a=g.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!a&&!y.includes(n))return;const o=async function(e,...t){const o=this.transaction(e,a?"readwrite":"readonly");let s=o.store;return r&&(s=s.index(t.shift())),(await Promise.all([s[n](...t),a&&o.done]))[0]};return v.set(t,o),o}var D;D=u,u={...D,get:(e,t,n)=>w(e,t)||D.get(e,t,n),has:(e,t)=>!!w(e,t)||D.has(e,t)};const m=async e=>await function(e,t,{blocked:n,upgrade:r,blocking:a,terminated:o}={}){const s=indexedDB.open(e,t),i=p(s);return r&&s.addEventListener("upgradeneeded",(e=>{r(p(s.result),e.oldVersion,e.newVersion,p(s.transaction))})),n&&s.addEventListener("blocked",(()=>n())),i.then((e=>{o&&e.addEventListener("close",(()=>o())),a&&e.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),i}("flashcards",1,{upgrade(t){t.createObjectStore(e,{keyPath:"id",autoIncrement:!1})}}),I=async({appName:e,factId:t,reviewType:n},r)=>{const a=await m(e),o=await a.get(e,[t,n]);let s=200,i=0;void 0!==o&&(void 0!==o.difficulty&&(s=o.difficulty),void 0!==o.lastReviewDate&&(i=o.lastReviewDate));const c=(()=>{const e=new Date,t=e.getMonth();return e.getDate()+100*t+1e4*e.getFullYear()})();if(i!==c){i=c;const o=r?1.05:.95;s=Math.min(1e3,Math.max(1,Math.floor(s*o))),await a.put(e,{id:[t,n],difficulty:s,lastReviewDate:i})}return{complete:!0}};var h;onmessage=(h={[e]:async({appName:e})=>{const t=await m(e),n=await t.getAll(e);console.log(n),t.close();const r={content:"foo",data:new Uint32Array([]).buffer};return[r,[r.data]]},[t]:async e=>await I(e,!0),[n]:async e=>await I(e,!1)},async e=>{const{id:t,type:n,payload:r}=e.data;if(n in h){const e=h[n];await(async(e,t,n)=>{try{const r=await t(n);Array.isArray(r)?postMessage({id:e,err:null,payload:r[0]},r[1]):postMessage({id:e,err:null,payload:r})}catch(t){postMessage({id:e,err:t,payload:null})}})(t,e,r)}else postMessage({id:t,err:new Error(`Unknown message type: ${n}`),payload:null})})})();
//# sourceMappingURL=cardstate.2554200bd152b5f6bfe9.worker.js.map