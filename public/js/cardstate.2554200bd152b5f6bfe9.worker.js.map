{"version":3,"sources":["webpack://chineseclass/./client/PromiseWorker.js","webpack://chineseclass/./client/shared/MessageType.js","webpack://chineseclass/./node_modules/idb/build/esm/wrap-idb-value.js","webpack://chineseclass/./node_modules/idb/build/esm/index.js","webpack://chineseclass/./client/workers/cardstate.js"],"names":["idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","target","prop","receiver","IDBTransaction","get","objectStoreNames","undefined","objectStore","set","value","has","transformCachableValue","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","storeNames","tx","call","sort","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","all","oldTraps","connect","appName","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","keyPath","autoIncrement","handleUpdateOnAnswer","factId","reviewType","correct","oldRecord","difficulty","lastReviewDate","currentDate","ts","Date","m","getMonth","getDate","getFullYear","getCurrentDateAsNumber","multiplier","Math","min","max","floor","put","id","handlers","onmessage","allData","getAll","console","log","close","res","content","data","Uint32Array","buffer","p","type","payload","message","h","callback","Array","isArray","postMessage","err","wrapHandlerFuction","Error"],"mappings":"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","file":"cardstate.2554200bd152b5f6bfe9.worker.js","sourcesContent":["export default class PromiseWorker {\n  constructor(worker) {\n    this.resolves = {};\n    this.rejects = {};\n    this.globalMessageId = 0;\n    this.worker = worker;\n    this.worker.addEventListener(\"message\", (msg) => this._handleMessage(msg));\n  }\n\n  sendMessage(type, payload) {\n    const id = this.globalMessageId++;\n    const message = { id, type, payload };\n\n    return new Promise((resolve, reject) => {\n      this.resolves[id] = resolve;\n      this.rejects[id] = reject;\n\n      this.worker.postMessage(message);\n    });\n  }\n\n  _handleMessage(message) {\n    const { id, err, payload } = message.data;\n    if (payload) {\n      const resolve = this.resolves[id];\n      resolve(payload);\n    } else {\n      const reject = this.rejects[id];\n      if (err !== null) {\n        reject(err);\n      } else {\n        reject(new Error(\"unknown error occurred\"));\n      }\n    }\n    delete this.resolves[id];\n    delete this.rejects[id];\n  }\n}\n\nconst wrapHandlerFuction = async (id, callback, payload) => {\n  try {\n    const res = await callback(payload);\n    if (Array.isArray(res)) {\n      postMessage({ id, err: null, payload: res[0] }, res[1]);\n    } else {\n      postMessage({ id, err: null, payload: res });\n    }\n  } catch (err) {\n    postMessage({ id, err, payload: null });\n  }\n};\n\nexport const makeWorkerFromHandlers = (handlers) => async (message) => {\n  const { id, type, payload } = message.data;\n  if (!(type in handlers)) {\n    postMessage({\n      id,\n      err: new Error(`Unknown message type: ${type}`),\n      payload: null,\n    });\n  } else {\n    const h = handlers[type];\n    await wrapHandlerFuction(id, h, payload);\n  }\n};\n","const MessageType = {\n  FETCH_ALL: \"FETCH_ALL\",\n  FETCH_ONE: \"FETCH_ONE\",\n  UPDATE_ON_CORRECT: \"UPDATE_ON_CORRECT\",\n  UPDATE_ON_INCORRECT: \"UPDATE_ON_INCORRECT\",\n};\n\nexport default MessageType;\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * Worker handles storing and retrieving data from the local database. On\n * startup the app will request all card data we have, and then during review\n * it will save updated data post-review. The app itself has no knowledge of\n * stored data except via these messages.\n */\nimport { makeWorkerFromHandlers } from \"../PromiseWorker\";\nimport MessageType from \"../shared/MessageType\";\nimport { openDB } from \"idb\";\n\nconst dbname = \"flashcards\";\nconst dbversion = 1;\nconst default_difficulty = 200;\n\nconst connect = async (appName) =>\n  await openDB(dbname, dbversion, {\n    upgrade(db) {\n      let objstore = db.createObjectStore(appName, {\n        keyPath: \"id\",\n        autoIncrement: false,\n      });\n    },\n  });\n\nconst handleFetchAll = async ({ appName }) => {\n  const db = await connect(appName);\n  const allData = await db.getAll(appName);\n  console.log(allData);\n  db.close();\n\n  const res = {\n    content: \"foo\",\n    data: new Uint32Array([]).buffer,\n  };\n  return [res, [res.data]];\n};\n\nconst getCurrentDateAsNumber = () => {\n  const ts = new Date();\n  const m = ts.getMonth();\n  const d = ts.getDate();\n  const y = ts.getFullYear();\n  return d + m * 100 + y * 10000;\n};\n\nconst handleUpdateOnAnswer = async (\n  { appName, factId, reviewType },\n  correct\n) => {\n  const db = await connect(appName);\n  const oldRecord = await db.get(appName, [factId, reviewType]);\n  let difficulty = default_difficulty;\n  let lastReviewDate = 0;\n  if (oldRecord !== undefined) {\n    if (oldRecord.difficulty !== undefined) {\n      difficulty = oldRecord.difficulty;\n    }\n    if (oldRecord.lastReviewDate !== undefined) {\n      lastReviewDate = oldRecord.lastReviewDate;\n    }\n  }\n  const currentDate = getCurrentDateAsNumber();\n  if (lastReviewDate !== currentDate) {\n    lastReviewDate = currentDate;\n    const multiplier = correct ? 1.05 : 0.95;\n    // Clamp the difficulty between 1 and 1000\n    difficulty = Math.min(\n      1000,\n      Math.max(1, Math.floor(difficulty * multiplier))\n    );\n    await db.put(appName, {\n      id: [factId, reviewType],\n      difficulty,\n      lastReviewDate,\n    });\n  }\n  return {\n    complete: true,\n  };\n};\n\nonmessage = makeWorkerFromHandlers({\n  [MessageType.FETCH_ALL]: handleFetchAll,\n  [MessageType.UPDATE_ON_CORRECT]: async (p) =>\n    await handleUpdateOnAnswer(p, true),\n  [MessageType.UPDATE_ON_INCORRECT]: async (p) =>\n    await handleUpdateOnAnswer(p, false),\n});\n"],"sourceRoot":""}